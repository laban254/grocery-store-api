name: Continuous Delivery

on:
  push:
    branches: ["staging"]
    paths-ignore:
      - "README.md"
      - "KUBERNETES.md"
      - "DOCKER.md"
      - "STARTUP.md"
      - "*.md"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: grocery_api
      IMAGE_TAG: latest
      NAMESPACE: grocery-api

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and export Docker image
      run: |
        echo "Building Docker image..."
        docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
        docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} > ${{ env.IMAGE_NAME }}.tar
        echo "Docker image built and saved successfully"

    - name: Deploy to kind cluster
      env:
        GCP_SSH_KEY: ${{ secrets.GCP_SSH_KEY }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        # Set up SSH
        mkdir -p ~/.ssh
        echo "$GCP_SSH_KEY" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H "$SERVER_HOST" >> ~/.ssh/known_hosts

        # Upload Docker image and kind config
        echo "Uploading Docker image and configuration..."
        scp -i ~/.ssh/id_ed25519 ${{ env.IMAGE_NAME }}.tar "$SERVER_USER@$SERVER_HOST:~/${{ env.IMAGE_NAME }}.tar"
        scp -i ~/.ssh/id_ed25519 k8s/kind-config.yaml "$SERVER_USER@$SERVER_HOST:~/kind-config.yaml"

        # Verify files were uploaded correctly
        ssh -i ~/.ssh/id_ed25519 "$SERVER_USER@$SERVER_HOST" "ls -la ~/kind-config.yaml ~/grocery_api.tar"

        # Run remote commands to set up and deploy
        ssh -i ~/.ssh/id_ed25519 "$SERVER_USER@$SERVER_HOST" bash -c '
          # Install kubectl if needed
          if ! command -v kubectl &> /dev/null; then
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi

          # Install kind if needed
          if ! command -v kind &> /dev/null; then
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
          fi

          # Delete existing cluster
          kind delete cluster --name grocery-cluster || true

          # Create volume directories
          mkdir -p /tmp/{postgres-data,redis-data,static-volume,media-volume}
          chmod -R 777 /tmp/{postgres-data,redis-data,static-volume,media-volume}

          # Create cluster using the config file
          kind create cluster --config=$HOME/kind-config.yaml

          # Load image into kind
          docker load < $HOME/grocery_api.tar
          kind load docker-image grocery_api:latest --name grocery-cluster

          # Configure kubectl
          kubectl config use-context kind-grocery-cluster

          # Clone repository
          if [ ! -d ~/grocery_api_deploy ]; then
            git clone https://github.com/laban254/grocery-store-api.git ~/grocery_api_deploy
          fi
          cd ~/grocery_api_deploy
          git fetch origin staging
          git checkout -f staging

          # Apply Kubernetes configs
          kubectl create namespace grocery-api --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/env-configmap.yaml -n grocery-api
          kubectl apply -f k8s/web-cm0-configmap.yaml -n grocery-api
          kubectl apply -f k8s/celery-cm0-configmap.yaml -n grocery-api
          kubectl apply -f k8s/db-deployment.yaml -f k8s/db-service.yaml -n grocery-api
          kubectl apply -f k8s/redis-deployment.yaml -f k8s/redis-service.yaml -n grocery-api

          # Wait for database
          kubectl wait --for=condition=available deployment/db --timeout=120s -n grocery-api || true

          # Deploy web and celery
          kubectl apply -f k8s/web-deployment.yaml -f k8s/web-service.yaml -n grocery-api
          kubectl apply -f k8s/celery-deployment.yaml -n grocery-api

          # Show status
          kubectl get pods -n grocery-api
          WEB_URL=$(kubectl get service web -n grocery-api -o jsonpath="{.spec.clusterIP}")
          echo "Web service is available at: $WEB_URL"
          rm -f ~/grocery_api.tar
        '
