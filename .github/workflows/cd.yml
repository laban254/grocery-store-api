name: Continuous Delivery

on:
  push:
    branches: [ "staging" ]
    paths-ignore:
      - "README.md"
      - "KUBERNETES.md"
      - "DOCKER.md"
      - "STARTUP.md"
      - "*.md"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: grocery_api
      IMAGE_TAG: latest
      NAMESPACE: grocery-api

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and export Docker image
      run: |
        echo "Building Docker image..."
        docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
        docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} > ${{ env.IMAGE_NAME }}.tar
        echo "Docker image built and saved successfully"

    - name: Set up SSH and deploy
      run: |
        echo "Setting up SSH connection..."
        mkdir -p ~/.ssh
        echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519

        # Debug step (will mask sensitive data)
        echo "SERVER_HOST is set: ${{ secrets.SERVER_HOST != '' }}"
        echo "SERVER_USER is set: ${{ secrets.SERVER_USER != '' }}"

        # Validate secrets are set
        if [ -z "${{ secrets.SERVER_HOST }}" ]; then
          echo "ERROR: SERVER_HOST secret is not set"
          exit 1
        fi

        if [ -z "${{ secrets.SERVER_USER }}" ]; then
          echo "ERROR: SERVER_USER secret is not set"
          exit 1
        fi

        # Add server to known hosts
        ssh-keyscan -H "${{ secrets.SERVER_HOST }}" >> ~/.ssh/known_hosts
        echo "SSH keyscan completed"

        # Test connection
        echo "Testing SSH connection..."
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" 'echo "Connected successfully!"'

        # Upload Docker image
        echo "Uploading Docker image..."
        scp -i ~/.ssh/id_ed25519 ${{ env.IMAGE_NAME }}.tar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/${{ env.IMAGE_NAME }}.tar
        echo "Image uploaded successfully"

        # Load Docker image into kind cluster
        echo "Loading Docker image into kind cluster..."
        ssh -i ~/.ssh/id_ed25519 "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" "
          # Load the image into kind
          echo 'Loading Docker image into kind cluster...'
          docker load < ${{ env.IMAGE_NAME }}.tar
          kind load docker-image ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} --name grocery-cluster
          echo 'Image loaded into kind cluster'
        "

        # Install Kubernetes tools if needed
        echo "Ensuring Kubernetes tools are installed..."
        ssh -i ~/.ssh/id_ed25519 "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" "
          # Check if kubectl is installed
          if ! command -v kubectl &> /dev/null; then
            echo 'kubectl not found, installing...'
            curl -LO \"https://dl.k8s.io/release/\$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi

          # Install kind
          if ! command -v kind &> /dev/null; then
            echo 'Installing kind...'
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
          fi

          # Delete existing cluster if it exists (for clean deployment)
          if kind get clusters 2>/dev/null | grep -q grocery-cluster; then
            echo 'Deleting existing kind cluster...'
            kind delete cluster --name grocery-cluster
          fi

          # Create directories for volume mounts
          mkdir -p /tmp/postgres-data /tmp/redis-data /tmp/static-volume /tmp/media-volume
          chmod -R 777 /tmp/postgres-data /tmp/redis-data /tmp/static-volume /tmp/media-volume

          # Create kind cluster with minimal resource requirements and extra mounts
          echo 'Creating kind cluster...'
          cat > /tmp/kind-config.yaml << 'EOL'
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
cluster-name: grocery-cluster
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        system-reserved: memory=256Mi
  extraMounts:
  - hostPath: /tmp/postgres-data
    containerPath: /tmp/postgres-data
  - hostPath: /tmp/redis-data
    containerPath: /tmp/redis-data
  - hostPath: /tmp/static-volume
    containerPath: /tmp/static-volume
  - hostPath: /tmp/media-volume
    containerPath: /tmp/media-volume
