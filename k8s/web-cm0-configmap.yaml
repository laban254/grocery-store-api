apiVersion: v1
data:
  .dockerignore: |
    # Python
    __pycache__/
    *.py[cod]
    *$py.class
    *.so
    .Python
    build/
    develop-eggs/
    dist/
    downloads/
    eggs/
    .eggs/
    lib/
    lib64/
    parts/
    sdist/
    var/
    wheels/
    *.egg-info/
    .installed.cfg
    *.egg

    # Django
    *.log
    local_settings.py
    db.sqlite3
    db.sqlite3-journal
    media

    # Unit test / coverage reports
    htmlcov/
    .tox/
    .nox/
    .coverage
    .coverage.*
    .cache
    nosetests.xml
    coverage.xml
    *.cover
    .hypothesis/
    .pytest_cache/

    # Docker
    docker-compose.override.yml

    # Environment and settings
    .env
    .env.local
    .env.development
    .env.production
    .venv
    venv/
    ENV/

    # IDE & editors
    .idea/
    .vscode/
    *.swp
    *.swo
    *~

    # Version control
    .git
    .gitignore
  .env: |
    # Django Secret Key - Generate a new one for your environment
    SECRET_KEY=your-secure-secret-key-here

    # Debug mode (set to False in production)
    DEBUG=True

    # Database settings
    DATABASE_URL=postgres://grocery_user:your_password@db:5432/grocery_api

    # PostgreSQL settings (used if dj-database-url is not available)
    POSTGRES_DB=grocery_api
    POSTGRES_USER=grocery_user
    POSTGRES_PASSWORD=your_password
    POSTGRES_HOST=db
    POSTGRES_PORT=5432

    # OAuth providers
    # Google (OpenID Connect compliant)
    GOOGLE_CLIENT_ID=your-google-client-id
    GOOGLE_CLIENT_SECRET=your-google-client-secret

    # OIDC Provider
    OIDC_PROVIDER_ID=your-oidc-provider
    OIDC_PROVIDER_NAME=Your OIDC Provider
    OIDC_SERVER_URL=https://your-oidc-provider.com
    OIDC_CLIENT_ID=your-client-id
    OIDC_CLIENT_SECRET=your-client-secret
    OIDC_REDIRECT_URI=http://localhost:8000/accounts/openid_connect/callback
    OIDC_AUTHORIZATION_ENDPOINT=https://your-oidc-provider.com/authorize
    OIDC_TOKEN_ENDPOINT=https://your-oidc-provider.com/token
    OIDC_USERINFO_ENDPOINT=https://your-oidc-provider.com/userinfo
    OIDC_JWKS_URI=https://your-oidc-provider.com/jwks

    # JWT Settings
    JWT_ACCESS_TOKEN_LIFETIME_MINUTES=60
    JWT_REFRESH_TOKEN_LIFETIME_DAYS=1

    # Other Settings
    ALLOWED_HOSTS=localhost,127.0.0.1

    # Africa's Talking SMS API
    AFRICAS_TALKING_USERNAME=sandbox
    AFRICAS_TALKING_API_KEY=your-api-key
    AFRICAS_TALKING_ENVIRONMENT=sandbox
    AFRICAS_TALKING_SENDER_ID=your-sender-id

    # Celery Configuration
    CELERY_BROKER_URL=redis://redis:6379/0
    CELERY_RESULT_BACKEND=redis://redis:6379/0
  .env.docker: |
    # Django Secret Key - Generate a new one for your environment
    SECRET_KEY=your-secure-secret-key-here

    # Debug mode (set to False in production)
    DEBUG=True

    # Database settings for Docker
    DATABASE_URL=postgres://grocery_user:your_password@db:5432/grocery_api

    # PostgreSQL settings (used if dj-database-url is not available)
    POSTGRES_DB=grocery_api
    POSTGRES_USER=grocery_user
    POSTGRES_PASSWORD=your_password
    POSTGRES_HOST=db
    POSTGRES_PORT=5432

    # OAuth providers
    # Google (OpenID Connect compliant)
    GOOGLE_CLIENT_ID=your-google-client-id
    GOOGLE_CLIENT_SECRET=your-google-client-secret

    # OIDC Provider
    OIDC_PROVIDER_ID=your-oidc-provider
    OIDC_PROVIDER_NAME=Your OIDC Provider
    OIDC_SERVER_URL=https://your-oidc-provider.com
    OIDC_CLIENT_ID=your-client-id
    OIDC_CLIENT_SECRET=your-client-secret
    OIDC_REDIRECT_URI=http://localhost:8000/accounts/openid_connect/callback
    OIDC_AUTHORIZATION_ENDPOINT=https://your-oidc-provider.com/authorize
    OIDC_TOKEN_ENDPOINT=https://your-oidc-provider.com/token
    OIDC_USERINFO_ENDPOINT=https://your-oidc-provider.com/userinfo
    OIDC_JWKS_URI=https://your-oidc-provider.com/jwks

    # JWT Settings
    JWT_ACCESS_TOKEN_LIFETIME_MINUTES=60
    JWT_REFRESH_TOKEN_LIFETIME_DAYS=1

    # Other Settings
    ALLOWED_HOSTS=localhost,127.0.0.1

    # Africa's Talking SMS API
    AFRICAS_TALKING_USERNAME=sandbox
    AFRICAS_TALKING_API_KEY=your-api-key
    AFRICAS_TALKING_ENVIRONMENT=sandbox
    AFRICAS_TALKING_SENDER_ID=your-sender-id

    # Celery Configuration for Docker
    CELERY_BROKER_URL=redis://redis:6379/0
    CELERY_RESULT_BACKEND=redis://redis:6379/0

    # Django Superuser (Optional - for automatic creation)
    # DJANGO_SUPERUSER_USERNAME=admin
    # DJANGO_SUPERUSER_EMAIL=admin@example.com
    # DJANGO_SUPERUSER_PASSWORD=secure_password
  .env.example: |
    # Django Secret Key - Generate a new one for your environment
    SECRET_KEY=your-secure-secret-key-here

    # Debug mode (set to False in production)
    DEBUG=True

    # Database settings
    DATABASE_URL=postgres://grocery_user:your_password@localhost:5432/grocery_api

    # PostgreSQL settings (used if dj-database-url is not available)
    POSTGRES_DB=grocery_api
    POSTGRES_USER=grocery_user
    POSTGRES_PASSWORD=your_password
    POSTGRES_HOST=localhost
    POSTGRES_PORT=5432

    # OAuth providers
    # Google (OpenID Connect compliant)
    GOOGLE_CLIENT_ID=your-google-client-id
    GOOGLE_CLIENT_SECRET=your-google-client-secret

    # OIDC Provider
    OIDC_PROVIDER_ID=your-oidc-provider
    OIDC_PROVIDER_NAME=Your OIDC Provider
    OIDC_SERVER_URL=https://your-oidc-provider.com
    OIDC_CLIENT_ID=your-client-id
    OIDC_CLIENT_SECRET=your-client-secret
    OIDC_REDIRECT_URI=http://localhost:8000/accounts/openid_connect/callback
    OIDC_AUTHORIZATION_ENDPOINT=https://your-oidc-provider.com/authorize
    OIDC_TOKEN_ENDPOINT=https://your-oidc-provider.com/token
    OIDC_USERINFO_ENDPOINT=https://your-oidc-provider.com/userinfo
    OIDC_JWKS_URI=https://your-oidc-provider.com/jwks

    # JWT Settings
    JWT_ACCESS_TOKEN_LIFETIME_MINUTES=60
    JWT_REFRESH_TOKEN_LIFETIME_DAYS=1

    # Other Settings
    ALLOWED_HOSTS=localhost,127.0.0.1

    # Africa's Talking SMS API
    AFRICAS_TALKING_USERNAME=sandbox
    AFRICAS_TALKING_API_KEY=your-api-key
    AFRICAS_TALKING_ENVIRONMENT=sandbox
    AFRICAS_TALKING_SENDER_ID=your-sender-id

    # Celery Configuration
    CELERY_BROKER_URL=redis://localhost:6379/0
    CELERY_RESULT_BACKEND=redis://localhost:6379/0
  .gitignore: |
    # Python
    __pycache__/
    *.py[cod]
    *$py.class
    *.so
    .Python
    build/
    develop-eggs/
    dist/
    downloads/
    eggs/
    .eggs/
    lib/
    lib64/
    parts/
    sdist/
    var/
    wheels/
    *.egg-info/
    .installed.cfg
    *.egg

    # Django
    *.log
    local_settings.py
    db.sqlite3
    db.sqlite3-journal
    media/
    staticfiles/

    # Virtual Environment
    venv/
    env/
    ENV/
    .env

    # IDE files
    .idea/
    .vscode/
    *.swp
    *.swo
    .DS_Store

    # Coverage
    htmlcov/
    .tox/
    .coverage
    .coverage.*
    .cache
    nosetests.xml
    coverage.xml
    *.cover

    # Docker
    docker-compose.override.yml
    data/

    # Secrets
    *.pem
    *.key

    # Other
    node_modules/
    .pytest_cache/
  .pre-commit-config.yaml: |
    repos:
      - repo: https://github.com/pre-commit/pre-commit-hooks
        rev: v4.5.0
        hooks:
          - id: trailing-whitespace
          - id: end-of-file-fixer
          - id: check-yaml
          - id: check-added-large-files
          - id: check-ast
          - id: check-json
          - id: check-merge-conflict
          - id: detect-private-key
          - id: debug-statements

      - repo: https://github.com/psf/black
        rev: 23.3.0
        hooks:
          - id: black
            language_version: python3.10
            args: [--line-length=100]

      - repo: https://github.com/pycqa/isort
        rev: 5.12.0
        hooks:
          - id: isort
            args: [--profile, black, --line-length=100]

      - repo: https://github.com/pycqa/flake8
        rev: 6.0.0
        hooks:
          - id: flake8
            args: [--max-line-length=100]
            exclude: migrations/

      - repo: local
        hooks:
          - id: django-test
            name: django-test
            entry: python3 src/manage.py test
            language: python
            pass_filenames: false
            always_run: true
            # Skip this hook since it requires many dependencies not available in pre-commit's environment
            stages: [manual]
            additional_dependencies: [django]
  DOCKER.md: |
    # Docker Setup for Grocery API

    This document provides instructions for running the Grocery API using Docker and Docker Compose.

    ## Prerequisites

    - [Docker](https://docs.docker.com/get-docker/)
    - [Docker Compose](https://docs.docker.com/compose/install/)

    ## Getting Started

    1. Clone the repository:
       ```bash
       git clone <repository-url>
       cd grocery_api
       ```

    2. Create an environment file:
       ```bash
       cp .env.docker .env
       ```
       Then edit the `.env` file to set your desired configuration.

    3. Run the setup script:
       ```bash
       ./docker/setup.sh
       ```

       Or manually build and start the services:
       ```bash
       docker-compose up -d --build
       ```

    4. Monitor the logs:
       ```bash
       docker-compose logs -f
       ```

    5. Access the application:
       - API: http://localhost:8000/
       - Admin interface: http://localhost:8000/admin/
       - API Documentation: http://localhost:8000/api/schema/swagger-ui/

    ## Configuration

    The application uses environment variables for configuration. Key variables include:

    - `DEBUG`: Set to "True" for development, "False" for production
    - `SECRET_KEY`: Django secret key
    - `ALLOWED_HOSTS`: Comma-separated list of allowed hosts
    - `DATABASE_URL`: PostgreSQL connection URL (default: postgres://grocery_user:your_password@db:5432/grocery_api)
    - `POSTGRES_DB`: PostgreSQL database name (default: grocery_api)
    - `POSTGRES_USER`: PostgreSQL username (default: grocery_user)
    - `POSTGRES_PASSWORD`: PostgreSQL password (default: your_password)
    - `CELERY_BROKER_URL`: Redis URL for Celery (default: redis://redis:6379/0)
    - `CELERY_RESULT_BACKEND`: Redis URL for Celery results (default: redis://redis:6379/0)

    > **Note**: The Redis service is configured to use port 6380 on the host machine to avoid conflicts with any local Redis installations, but inside the Docker network, containers still communicate with Redis on the standard port 6379.

    For a complete list of configuration options, see the `.env.docker` file.

    ## Services

    The Docker setup includes the following services:

    - **db**: PostgreSQL database (accessible at localhost:5432)
      - Database name: grocery_api
      - Username: grocery_user
      - Password: your_password
    - **redis**: Redis for caching and Celery message broker (accessible at localhost:6380)
    - **web**: Django web application (accessible at localhost:8000)
    - **celery**: Celery worker for asynchronous tasks

    ## Development Workflow

    ### Running commands

    You can run Django management commands inside the container:

    ```bash
    docker-compose exec web python src/manage.py <command>
    ```

    For example, to create a superuser:

    ```bash
    docker-compose exec web python src/manage.py createsuperuser
    ```

    ### Making migrations

    ```bash
    docker-compose exec web python src/manage.py makemigrations
    docker-compose exec web python src/manage.py migrate
    ```

    ### Running tests

    ```bash
    docker-compose exec web pytest
    ```

    ## Stopping the Services

    To stop all services:

    ```bash
    docker-compose down
    ```

    To stop and remove volumes (this will delete all data):

    ```bash
    docker-compose down -v
    ```

    ## Production Deployment

    For production, make sure to:

    1. Update the `.env` file with secure credentials
    2. Set `DEBUG=False`
    3. Set appropriate `ALLOWED_HOSTS`
    4. Use a proper secret key
    5. Enable HTTPS

    For more secure deployments, consider using Docker Swarm or Kubernetes.
  Dockerfile: |
    FROM python:3.10-slim

    # Set environment variables
    ENV PYTHONDONTWRITEBYTECODE=1
    ENV PYTHONUNBUFFERED=1
    ENV PYTHONPATH=/app/src

    # Set work directory
    WORKDIR /app

    # Install dependencies
    RUN apt-get update && apt-get install -y \
        gcc \
        postgresql-client \
        libpq-dev \
        netcat-traditional \
        && apt-get clean \
        && rm -rf /var/lib/apt/lists/*

    # Install Python dependencies
    COPY requirements.txt /app/
    RUN pip install --upgrade pip && pip install -r requirements.txt

    # Copy project
    COPY . /app/

    # Copy entrypoint script
    COPY ./docker/entrypoint.sh /entrypoint.sh
    RUN chmod +x /entrypoint.sh

    # Create directories for static and media files
    RUN mkdir -p /app/src/staticfiles /app/src/mediafiles

    # Run entrypoint script
    ENTRYPOINT ["/entrypoint.sh"]
  README.md: |
    # Grocery API

    A Django-based REST API for managing a grocery store, deployed on Kubernetes with a CI/CD pipeline.

    ## Key Features

    - [Authentication & Authorization](accounts/) - JWT, OAuth, Phone Verification
    - [Product Management](products/) - MPTT Categories, Advanced Search
    - [Order Processing](orders/) - Async Processing, SMS Notifications
    - [API Documentation](http://localhost:8000/api/schema/swagger-ui/) - OpenAPI/Swagger
    - [Kubernetes Deployment](k8s/) - VM-based with GitHub Actions

    ## Technologies

    ### Application Stack
    - Django 5.2 + DRF 3.16
    - PostgreSQL 14 + Redis
    - Celery + Africa's Talking
    - JWT + OAuth Authentication

    ### Infrastructure
    - Kubernetes (k3s)
    - Docker + GitHub Actions
    - VM Deployment
    - SSH Remote Access

    ## Getting Started

    ### Prerequisites

    - Python 3.10+
    - PostgreSQL 14+
    - Redis (for Celery)
    - Git

    ### Quick Start (Development)

    1. **Clone and Setup**
       ```bash
       git clone <repository-url>
       cd grocery_api
       python -m venv venv
       source venv/bin/activate
       pip install -r requirements.txt
       ```

    2. **Configure Environment**
       ```bash
       cp .env.example .env  # Then edit .env with your settings
       ```

    3. **Start Services**
       ```bash
       docker-compose up -d
       python manage.py migrate
       python manage.py runserver



    5. Run migrations
       ```bash
       cd src
       python manage.py migrate
       ```

    6. Create a superuser
       ```bash
       python manage.py createsuperuser
       ```

    7. Populate the database with sample data (optional)
       ```bash
       python manage.py populate_db
       ```

    8. Start the development server
       ```bash
       python manage.py runserver
       ```

    9. In a separate terminal, start Celery for background tasks
       ```bash
       cd src
       celery -A grocery_api worker --loglevel=info
       ```

    ### API Documentation

    Once the server is running, you can access the API documentation at:

    - Swagger UI: http://localhost:8000/api/schema/swagger-ui/
    - ReDoc: http://localhost:8000/api/schema/redoc/
    - Download OpenAPI schema: http://localhost:8000/api/schema/


    ## Project Structure

    ```
    src/
      ├── manage.py
      ├── grocery_api/      # Project configuration
      ├── accounts/         # User management
      ├── products/         # Product catalog
      ├── orders/           # Order processing
      └── core/             # Shared functionality
    ```

    ## Development

    ### Running Tests

    ```bash
    pytest --cov
    ```

    ### Code Quality

    This project uses pre-commit hooks to maintain code quality:

    ```bash
    # Install pre-commit hooks
    pre-commit install

    # Run pre-commit manually on all files
    pre-commit run --all-files
    ```

    ### Container Development

    Run the full stack in containers:

    ```bash
    # Start all services
    docker-compose up -d

    # View logs
    docker-compose logs -f

    # Run migrations
    docker-compose exec web python manage.py migrate
    ```

    See [docker-compose.yml](docker-compose.yml) and [Dockerfile](Dockerfile) for details.


    ## Development Guidelines

    ### Local Development
    1. Create feature branch from `main`
    2. Run tests: `pytest --cov`
    3. Submit PR with clear description
    4. Address review comments
    5. Merge after approval

    ### CI/CD Pipeline
    - **On PR**: Tests, linting, security scans
    - **On Merge**: Automated deployment to VM
    - See [deploy-staging.yml](.github/workflows/deploy-staging.yml)

    ### Quality Assurance
    - Pre-commit hooks for code quality
    - Automated testing with pytest
    - Coverage reporting via Codecov

    ## Deployment

    ### Prerequisites
    - VM with Docker and k3s installed
    - GitHub repository with necessary secrets configured

    ### GitHub Actions Secrets Required
    ```
    VM_HOST             # VM IP or hostname
    VM_USER             # SSH username
    VM_SSH_KEY          # Private SSH key
    VM_HOST_KEY         # VM's public key
    SSH_PUBLIC_KEY      # Your public SSH key
    K8S_REPO            # k8s config repository
    GH_PAT              # GitHub Personal Access Token
    ```

    ### Deployment Process
    1. Push to main branch triggers the workflow
    2. GitHub Actions:
       - Builds Docker image
       - Transfers to VM via SSH
       - Applies k8s configurations
       - Updates services

    See [deploy-staging.yml](.github/workflows/deploy-staging.yml) for details.

    ### Kubernetes Components
    - `app-deployment.yaml` - API service deployment
    - `app-service.yaml` - NodePort service config
    - `postgres-deployment.yaml` - Database setup
    - `configmap.yaml` - Environment variables
    - `secrets.yaml` - Sensitive data

    ### Monitoring
    - Access metrics at `/metrics`
    - Use `kubectl` for logs and status

    ## Troubleshooting

    ### Common Issues
    1. **Pod Startup Failures**
       ```bash
       kubectl describe pod <pod-name>
       kubectl logs <pod-name>
       ```

    2. **Database Connection**
       - Check PostgreSQL PVC status
       - Verify secrets are properly mounted
       - See `postgres-deployment.yaml`

    3. **SSH Access**
       - Verify SSH keys in GitHub secrets
       - Check VM firewall settings
       - See `setup-ssh.sh`

    ### Getting Help
    - [Submit an Issue](../../issues)
    - Check existing issues
    - Review deployment logs
  STARTUP.md: |
    # Starting the Dockerized Grocery API

    This guide will help you start the Grocery API using Docker for the first time.

    ## Prerequisites

    - Docker and Docker Compose installed
    - Git (to clone the repository)

    ## Step 1: Clone the Repository

    ```bash
    git clone <repository-url>
    cd grocery_api
    ```

    ## Step 2: Set Up Environment Variables

    ```bash
    cp .env.docker .env
    ```

    Edit the `.env` file to customize your configuration if needed. The default database settings are:

    ```
    DATABASE_URL=postgres://grocery_user:your_password@db:5432/grocery_api
    POSTGRES_DB=grocery_api
    POSTGRES_USER=grocery_user
    POSTGRES_PASSWORD=your_password
    ```

    For Redis configuration:
    ```
    CELERY_BROKER_URL=redis://redis:6379/0
    CELERY_RESULT_BACKEND=redis://redis:6379/0
    ```

    ## Step 3: Start the Services

    Option 1: Using the setup script:
    ```bash
    ./docker/setup.sh
    ```

    Option 2: Manual startup:
    ```bash
    docker-compose up -d
    ```

    ## Step 4: Check Service Status

    ```bash
    docker-compose ps
    ```

    All services should be running. If any service has exited, check the logs:

    ```bash
    docker-compose logs <service-name>
    ```

    For example:
    ```bash
    docker-compose logs web
    docker-compose logs db
    docker-compose logs redis
    docker-compose logs celery
    ```

    ## Step 5: Access the Application

    - API: http://localhost:8000/
    - Admin interface: http://localhost:8000/admin/
    - API Documentation: http://localhost:8000/api/schema/swagger-ui/

    ## Step 6: Create an Admin User (Optional)

    ```bash
    docker-compose exec web python src/manage.py createsuperuser
    ```

    ## Troubleshooting

    ### Port Conflicts

    If you see an error like:
    ```
    Error starting userland proxy: listen tcp4 0.0.0.0:6379: bind: address already in use
    ```

    This means one of the ports required is already in use on your system. The docker-compose.yml already maps Redis to port 6380 to avoid conflicts with local Redis installations.

    ### Database Connection Issues

    If the web service fails to connect to the database, ensure:
    1. The database service is running: `docker-compose ps db`
    2. The database environment variables are correct in the .env file
    3. Check the logs: `docker-compose logs db`

    Common issues and solutions:
    - If you see a "database 'grocery_api' does not exist" error, the PostgreSQL container might not have initialized the database correctly. You can try:
      ```bash
      docker-compose down -v
      docker-compose up -d
      ```
    - If you see a "role 'grocery_user' does not exist" error, check if your database settings in `.env` match the ones used in `docker-compose.yml`
    - Ensure that your `DATABASE_URL` in `.env` matches the PostgreSQL settings (POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD)

    ### Redis Connection Issues

    If Celery fails to connect to Redis, ensure:
    1. The Redis service is running: `docker-compose ps redis`
    2. Check the logs: `docker-compose logs redis`
    3. Verify that your Redis configuration in `.env` is correct:
       ```
       CELERY_BROKER_URL=redis://redis:6379/0
       CELERY_RESULT_BACKEND=redis://redis:6379/0
       ```
       Note that inside Docker, the hostname is `redis` and the port is `6379`, but from your host machine, Redis is accessible at port `6380`.

    ## Stopping the Services

    To stop all services:
    ```bash
    docker-compose down
    ```

    To stop and remove volumes (this will delete all data):
    ```bash
    docker-compose down -v
    ```
  docker-compose.yml: |
    version: '3.8'

    services:
      db:
        image: postgres:15
        volumes:
          - postgres_data:/var/lib/postgresql/data/
        env_file:
          - ./.env
        environment:
          - POSTGRES_DB=${POSTGRES_DB:-grocery_api}
          - POSTGRES_USER=${POSTGRES_USER:-grocery_user}
          - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your_password}
        ports:
          - "5432:5432"
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-grocery_user}"]
          interval: 5s
          timeout: 5s
          retries: 5

      redis:
        image: redis:7-alpine
        ports:
          - "6380:6379"
        volumes:
          - redis_data:/data
        healthcheck:
          test: ["CMD", "redis-cli", "ping"]
          interval: 5s
          timeout: 5s
          retries: 5

      web:
        build: .
        command: python src/manage.py runserver 0.0.0.0:8000
        volumes:
          - .:/app
          - static_volume:/app/src/staticfiles
          - media_volume:/app/src/mediafiles
        ports:
          - "8000:8000"
        env_file:
          - ./.env
        environment:
          - DATABASE_URL=postgres://${POSTGRES_USER:-grocery_user}:${POSTGRES_PASSWORD:-your_password}@db:5432/${POSTGRES_DB:-grocery_api}
          - CELERY_BROKER_URL=redis://redis:6379/0
          - CELERY_RESULT_BACKEND=redis://redis:6379/0
        depends_on:
          db:
            condition: service_healthy
          redis:
            condition: service_healthy

      celery:
        build: .
        command: celery -A grocery_api worker -l INFO
        volumes:
          - .:/app
          - static_volume:/app/src/staticfiles
          - media_volume:/app/src/mediafiles
        env_file:
          - ./.env
        environment:
          - DATABASE_URL=postgres://${POSTGRES_USER:-grocery_user}:${POSTGRES_PASSWORD:-your_password}@db:5432/${POSTGRES_DB:-grocery_api}
          - CELERY_BROKER_URL=redis://redis:6379/0
          - CELERY_RESULT_BACKEND=redis://redis:6379/0
        depends_on:
          - db
          - redis
          - web

    volumes:
      postgres_data:
      redis_data:
      static_volume:
      media_volume:
  pyproject.toml: |
    [tool.black]
    line-length = 100
    target-version = ['py310']
    include = '\.pyi?$'
    exclude = '''
    /(
        \.git
      | \.venv
      | venv
      | migrations
      | build
      | dist
    )/
    '''

    [tool.pytest.ini_options]
    DJANGO_SETTINGS_MODULE = "grocery_api.settings"
    python_files = "test_*.py"
    testpaths = ["src"]
    pythonpath = ["src"]
    filterwarnings = [
        "ignore::DeprecationWarning",
        "ignore::PendingDeprecationWarning",
    ]
  pytest.ini: |
    [pytest]
    DJANGO_SETTINGS_MODULE = grocery_api.test_settings
    python_files = tests.py test_*.py *_tests.py
    addopts = --reuse-db --migrations
    pythonpath = src
  requirements.txt: |
    africastalking==1.2.9
    amqp==5.3.1
    asgiref==3.7.2
    async-timeout==5.0.1
    attrs==25.3.0
    billiard==4.2.1
    celery==5.3.6
    certifi==2023.11.17
    cffi==1.16.0
    charset-normalizer==3.3.2
    click==8.1.7
    click-didyoumean==0.3.1
    click-plugins==1.1.1
    click-repl==0.3.0
    cryptography==41.0.7
    defusedxml==0.7.1
    dj-database-url==2.1.0
    Django==4.2.7
    django-allauth==0.54.0
    django-extensions==3.2.3
    django-js-asset==2.2.0
    django-mptt==0.14.0
    djangorestframework==3.14.0
    djangorestframework-simplejwt==5.2.2
    drf-spectacular==0.28.0
    ecdsa==0.19.1
    idna==3.10
    inflection==0.5.1
    jsonschema==4.23.0
    jsonschema-specifications==2023.12.1
    kombu==5.3.4
    oauthlib==3.2.2
    packaging==25.0
    prompt_toolkit==3.0.51
    psycopg2-binary==2.9.9
    pyasn1==0.6.1
    pycparser==2.22
    PyJWT==2.9.0
    pytest==8.0.0
    pytest-django==4.11.1
    pytest-cov==4.1.0
    python-dateutil==2.9.0.post0
    python-dotenv==1.0.1
    python-jose==3.3.0
    python3-openid==3.2.0
    PyYAML==6.0.2
    redis==6.1.1
    referencing==0.31.1
    requests==2.31.0
    requests-oauthlib==2.0.0
    rpds-py==0.20.1
    rsa==4.9.1
    schema==0.7.7
    six==1.17.0
    sqlparse==0.5.3
    typing_extensions==4.7.1
    tzdata==2023.3
    uritemplate==4.1.1
    urllib3==1.26.8
    vine==5.1.0
    wcwidth==0.2.13
  setup.cfg: |
    [isort]
    profile = black
    line_length = 100
    multi_line_output = 3
    include_trailing_comma = True
    force_grid_wrap = 0
    use_parentheses = True
    ensure_newline_before_comments = True
    skip = migrations,venv

    [flake8]
    max-line-length = 100
    exclude = .git,__pycache__,build,dist,migrations,venv
    ignore = E203,W503
    max-complexity = 10
    per-file-ignores =
        # imported but unused in __init__.py
        __init__.py:F401
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: web
  name: web-cm0
